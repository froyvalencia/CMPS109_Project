<<<<<<< HEAD
Class TYPE {/
  //STRIng , CHAR, INT, REAl
};

=======
Class Type {
//STRIng , CHAR, INT, REAl
};
>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c
class alpha : TYPE {
  flag
  size;
};

class char_t : alpha {
};
class str_t : alpha {
};
class num : type {
  void add(){}
};
class dbl_t : num {
};
class int_t : num {
};

template<S *, T *, V *>
Class VAR {
  VAR() {declare stuff }
  varhelpers(){}
};
class Machine {
  MACHINE(){
    //$
    //parser mechanis -> callout to antother classm
    //< >
<<<<<<< HEAD
    //... > 
    //HahsTable[VAR.id] = OBK(VAR)
    //VAR<><><> t = new VAR<><><>();
    
    //submitCommand()

=======
    //... >
    //HahsTable[VAR.id] = OBK(VAR)
    //VAR<><><> t = new VAR<><><>();
>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c

    //submitCommand()  
    //I/O
    //
  }
};

  //parse()
  //VAR<><><>
<<<<<<< HEAD
  
=======

>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c
class parser {
  parser()
  //  getName();
  //getType();
  //getValue();
<<<<<<< HEAD
    
=======

>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c

};

//undetermined
//  string tokenizer(){}

class pasrse_Instruction : parser {
<<<<<<< HEAD
  
=======

>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c
  pasrse_Instruction(String instruction){
    string instructionType = getInstructionType();
    List<string> params = getParameters(instructionType);//or get objectType
    //for param : objType.getParams()) //hopefully by refrence or something
    int num = getNumOfParams();
    for(param : params)
      //get some particular thing
  }
<<<<<<< HEAD
  
};

class parse_Asignment : parser {
 
=======

};

class parse_Asignment : parser {

>>>>>>> fa495a350acf269d262156ad226a1014b0ac142c
  parse_Asignmnet(String asignment){
    inst = toeknzize(null,'$');
    name = tokenize('$',',' )
    getName();
    getType();
    getValue();
  }
};

int main() {

  return 0;
}
